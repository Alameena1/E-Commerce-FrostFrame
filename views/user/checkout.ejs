<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout Page</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        /* nav */
        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 30px;
            background-color: #000000;
            color: #fff;
        }

        .logo img {
            height: 50px;
        }

        .nav-icons ul,
        .nav-options ul {
            list-style: none;
            display: flex;
        }

        .nav-icons li,
        .nav-options li {
            margin-left: 20px;
        }

        .nav-icons img {
            height: 30px;
        }

        .nav-options a {
            text-decoration: none;
            color: #fff;
            margin: 30px;
        }

        @media (max-width: 768px) {
            .navbar {
                flex-direction: column;
                align-items: flex-start;
            }

            .nav-icons,
            .nav-options {
                margin-top: 10px;
            }

            .nav-icons ul,
            .nav-options ul {
                display: flex;
            }

            .nav-icons li,
            .nav-options li {
                margin-left: 50px;
            }
        }

        .nav-icons ul {
            list-style: none;
            display: flex;
            align-items: center;
        }

        .nav-icons li {
            margin-right: 20px;
        }

        .nav-icons li:last-child {
            margin-right: 0;
        }

        .nav-icons form {
            display: flex;
            align-items: center;
        }

        .nav-icons input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }

        .nav-icons button {
            border: none;
            background-color: transparent;
            cursor: pointer;
            margin-left: 10px;
            color: white;
        }

        .search-bar {
            width: 250px;
            height: 45px;
            background: transparent;
            border: 2px solid #e4e4e4;
            border-radius: 6px;
            display: flex;
            align-items: center;
        }

        .search-bar input {
            width: 100%;
            background: transparent;
            border: none;
            outline: none;
            font-size: 16px;
            color: #e4e4e4;
            padding-left: 10px;
        }

        .search-bar input::placeholder {
            color: #e4e4e4;
        }

        .search-bar button {
            width: 40px;
            height: 100%;
            background: transparent;
            border: none;
            outline: none;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            color: white;
        }

        /* end nav */

        .container {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .accordion {
            width: 75%;
            margin-right: 20px;
        }

        .accordion-item {
            background-color: #fff;
            border: 1px solid #ddd;
            margin-bottom: 10px;
            border-radius: 5px;
            overflow: hidden;
            position: relative;
        }

        .accordion-header {
            background-color: #ffffff;
            color: rgb(0, 0, 0);
            cursor: pointer;
            padding: 15px;
            text-align: left;
            font-size: 18px;
            border: none;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .accordion-header .tick {
            display: none;
            font-size: 18px;
            color: #28a745;
        }

        .accordion-content {
            padding: 15px;
            display: none;
        }

        .accordion-content form {
            display: flex;
            flex-direction: column;
        }

        .accordion-content form label {
            margin-bottom: 5px;
        }

        .accordion-content form input[type="text"] {
            margin-bottom: 10px;
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .accordion-content form button,
        .accordion-content form .existing-address {
            padding: 10px;
            font-size: 16px;
            border: none;
            background-color: #007bff;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            width: auto;
            align-self: flex-start;
        }

        .accordion-content form .existing-address {
            background-color: #6c757d;
        }

        .order-summary-box {
            width: 25%;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            height: fit-content;
        }

        .order-summary-box h2 {
            margin-top: 0;
        }

        .quantity-input {
            display: flex;
            align-items: center;
        }

        .quantity-input button {
            padding: 5px 10px;
            font-size: 16px;
            border: 1px solid #ddd;
            background-color: #007bff;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }

        .quantity-input input {
            width: 40px;
            text-align: center;
            margin: 0 10px;
            font-size: 16px;
            padding: 5px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }

        .payment-options {
            display: flex;
            flex-direction: column;
        }

        .payment-options label {
            margin-bottom: 10px;
            cursor: pointer;
        }

        .payment-options input {
            margin-right: 10px;
        }

        .order-summary-box {
            width: 25%;
            background-color: #fff;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            height: fit-content;
        }

        .order-summary-box h2 {
            margin-top: 0;
        }

        .price-detail {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 16px;
            margin: 10px 0;
        }

        .price {
            font-weight: bold;
        }


        footer {
            background-color: #000000;
            color: #fff;
            text-align: center;
            padding: 20px 0;
        }


        .footer {
            background-color: #333;
            /* Set background color */
            color: #fff;
            /* Set text color */

            /* Add padding */
        }

        .footer .containerr {
            width: 90%;
            /* Set container width */
            margin: 0 auto;
            /* Center the container */
        }

        .footer .row {
            display: flex;
            /* Use flexbox for the row */
            flex-wrap: wrap;
            /* Allow wrapping on smaller screens */
            justify-content: space-between;
            /* Space evenly between columns */
        }

        .footer .col-md-4 {
            flex: 0 0 calc(33.333% - 20px);
            /* Set column width */
            max-width: calc(33.333% - 20px);
            /* Set max-width */
            margin-bottom: 20px;
            /* Add margin between columns */
        }

        .footer h5 {
            color: #fff;
            /* Set heading color */
        }

        .footer p {
            margin: 10px 0;
            /* Add margin to paragraphs */
        }

        .footer .social-icons li {
            display: inline-block;
            /* Display social icons horizontally */
            margin-right: 10px;
            /* Add margin between icons */
        }

        .footer .social-icons li a {
            color: #fff;
            /* Set icon color */
            font-size: 20px;
            /* Set icon size */
        }

        .footer .quick-links li {
            display: block;
            margin-bottom: 10px;
            /* Add margin between quick links */
        }

        .footer .quick-links li a {
            color: #fff;
            /* Set link color */
            text-decoration: none;
            /* Remove underline */
        }

        .footer .quick-links li a:hover {
            text-decoration: underline;
            /* Add underline on hover */
        }

        .error-message {
            color: red;
            margin-top: 10px;
        }

        .next-button {
            color: white;
            background-color: #007bff;
        }
    </style>
</head>

<body>
    <nav class="navbar">
        <div class="logo">
            <a href="/"><img src="/img/Screenshot 2024-04-13 105644.png" alt="Logo"></a>
        </div>
        <div class="nav-options">
            <div class="dropdown">
                <div class="dropdown" 2>

                    <div class="dropdown-content">
                        <% newcategory.forEach((categories, index)=> { %>
                            <a href="/sunglass?categoryName=<%=categories.categoryName %>">
                                <%= categories.categoryName %>
                            </a>
                            <% }); %>
                    </div>
                </div>
            </div>
        </div>
        <div class="nav-icons">
            <ul>
                <form action="#" class="search-bar">
                    <input type="text" placeholder="Search...">
                    <button type="submit"><box-icon name='search'><i class='bx bx-search'></i></box-icon></button>
                </form>
                <% if (loggedIn) { %>
                    <form action="/logout" method="post">
                        <button type="submit">Logout</button>
                    </form>
                    <% } else { %>
                        <form action="/logout" method="post">
                            <button type="submit">Login</button>
                        </form>
                        <% } %>
                            <form action="/cart" method="get">
                                <button type="submit"><i class="bi bi-cart-fill" style="color: white;"></i></button>
                            </form>
                            <li><a href="/profile"><i class="bi bi-person-circle" style="color: white;"></i></a></li>
            </ul>
        </div>
    </nav>
    <h2 style="text-align: center;">Checkout</h2>
    <div class="container">
        <div class="accordion">
            <div class="accordion-item">
                <button class="accordion-header" id="addressHeader" type="button">
                    Select Address
                    <span class="tick" id="addressTick">✔</span>
                </button>
                <div class="accordion-content" id="addressContent">
                    <form action="/checkout" method="post">
                        <div id="existingAddresses">
                            <select name="address" id="addressSelect">
                                <option value="">Select an address</option>
                                <% address.forEach((addr)=> { %>
                                    <option value="<%= addr._id %>">
                                        <%= addr.name+ ', ' + addr.address + ', ' + addr.locality + ', ' + addr.state
                                            + ', ' + addr.pincode %>
                                    </option>
                                    <% }); %>
                            </select>

                        </div>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal"
                            data-bs-target="#addAddressModal" data-bs-whatever="@getbootstrap">Add Address</button>
                        <button type="button" id="confirmAddressBtn">Next</button>
                        <p id="addressError" class="error-message"></p>

                       </div>
                        </div>

                         <div class="accordion-item">
                         <button class="accordion-header" id="orderSummaryHeader" type="button">Order Summary</button>

                          <div class="accordion-content" id="orderSummaryContent">
                        <% if (cart && cart.items.length> 0) { %>
                        <% cart.items.forEach(item=> { %>
                            <div class="product">
                                <div class="product-image">
                                    <img style="width: 150px;" src="<%= item.productId.productImages[0] %>"
                                        alt="<%= item.productId.name %>">
                                </div>
                                <div class="product-details">
                                    <div class="product-title">
                                        <%= item.productId.name %>
                                    </div>
                                    <p class="product-description">
                                        <%= item.productId.description %>
                                    </p>
                                    <p class="product-quantity">Quantity: <%= item.quantity %>
                                    </p><!-- Added quantity here -->
                                </div>
                                <div class="product-price">
                                    <%= item.productId.price.toFixed(2) %>
                                </div>
                            </div>
                            <% }); %>
                                <button type="button" id="confirmOrderSummaryBtn" class="next-button">Next</button>
                                <% } else { %>
                                    <p>Your cart is empty.</p>
                                    <% } %>
                                        <p id="orderSummaryError" class="error-message"></p>
                          </div>
                         </div>


            <div class="accordion-item">
                <button class="accordion-header" id="paymentHeader" type="button">Payment Options</button>
                <div class="accordion-content" id="paymentContent">

                    <div class="payment-options">
                        <label><input type="radio" name="payment" value="razorpay"> Razorpay</label>
                        <label><input type="radio" name="payment" value="cod"> Cash on Delivery</label>
                    </div>

                    <button type="submit" id="confirmPaymentBtn" class="next-button">Place Order</button>
                    <p id="paymentError" class="error-message"></p>


                </div>
            </div>
        </div>
        <div class="order-summary-box">
            <h2>PRICE DETAILS</h2>
            <hr>
            <div class="price-detail">
                <span>Total Amount:</span>
                <span class="price">
                    <%= cart && cart.items ? cart.items.reduce((total, item)=> total + item.productId.price *
                        item.quantity, 0).toFixed(2) : '0.00' %>
                </span>
            </div>
            <div class="price-detail">
                <span>Delivery Fee:</span>
                <span class="price" style="color: green;">15</span>
            </div>
            <div class="coupon-section">
                <label for="couponCode">Coupon Code:</label><br>
                <select id="couponCode" name="couponCode">
                    <option value="">Select a coupon</option> 
                    <% coupons.forEach(function(coupon) { %>
                        <option value="<%= coupon.code %>"><%= coupon.code %></option>
                    <% }); %>
                </select>
                <br>
                <button type="button" id="applyCouponBtn" style="margin-top: 5px;">Apply Coupon</button>
                <button type="button" id="removeCouponBtn" style="display: none; margin-top: 5px;">Remove Coupon</button>
                <p id="couponError" class="error-message"></p>
            </div>
            
            <div class="price-detail">
                <span>Discount:</span>
                <span class="price" id="discount-amount" style="color: red;">0.00</span>
            </div>
            <div class="price-detail">
                <span>GRAND TOTAL:</span>
                <span class="price" id="grand-total">
                    <%= cart && cart.items ? (cart.items.reduce((total, item)=> total + item.productId.price *
                        item.quantity, 0) + 15).toFixed(2) : '15.00' %>
                </span>
                <input type="hidden" id="grandTotalInput" name="grandTotal"
                    value="<%= cart && cart.items ? (cart.items.reduce((total, item)=> total + item.productId.price * item.quantity, 0) + 15).toFixed(2) : '15.00' %>">
            </div>
        </div>
 </form>
    </div>

   
    <div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Address</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="addAddressForm">
                        <div class="form-group">
                            <label for="add-name">Name</label>
                            <input type="text" class="form-control" id="add-name" name="name">
                            <span id="add-name-error" class="error-message"></span>
                            
                            <label for="add-address">Address</label>
                            <input type="text" class="form-control" id="add-address" name="address">
                            <span id="add-address-error" class="error-message"></span>
                            
                            <label for="add-phone">Phone</label>
                            <input type="text" class="form-control" id="add-phone" name="phone">
                            <span id="add-phone-error" class="error-message"></span>
                            
                            <label for="add-locality">Locality</label>
                            <input type="text" class="form-control" id="add-locality" name="locality">
                            <span id="add-locality-error" class="error-message"></span>
                            
                            <label for="add-pincode">Pincode</label>
                            <input type="text" class="form-control" id="add-pincode" name="pincode">
                            <span id="add-pincode-error" class="error-message"></span>
                            
                            <label for="add-state">State</label>
                            <input type="text" class="form-control" id="add-state" name="state">
                            <span id="add-state-error" class="error-message"></span>
                        </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
                <p id="couponid" style="display: none;"></p>
                </form>
            </div>
        </div>
    </div>
    

    <footer class="footer">
        <div class="containerr">
            <div class="row">
                <div class="col-md-4">
                    <h5>Contact Us</h5>
                    <p>Email: info@example.com</p>
                    <p>Phone: +123456789</p>
                </div>
                <div class="col-md-4">
                    <h5>Follow Us</h5>
                    <ul class="social-icons">
                        <li><a href="#"><i class="fab fa-facebook"></i></a></li>
                        <li><a href="#"><i class="fab fa-twitter"></i></a></li>
                        <li><a href="#"><i class="fab fa-instagram"></i></a></li>
                        <li><a href="#"><i class="fab fa-linkedin"></i></a></li>
                    </ul>
                </div>
                <div class="col-md-4">
                    <h5>Quick Links</h5>
                    <ul class="quick-links">
                        <li><a href="#">Home</a></li>
                        <li><a href="#">About</a></li>
                        <li><a href="#">Services</a></li>
                        <li><a href="#">Contact</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <!-- razorpay -->
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const addressHeader = document.getElementById('addressHeader');
            const orderSummaryHeader = document.getElementById('orderSummaryHeader');
            const paymentHeader = document.getElementById('paymentHeader');

            const addressContent = document.getElementById('addressContent');
            const orderSummaryContent = document.getElementById('orderSummaryContent');
            const paymentContent = document.getElementById('paymentContent');

            const confirmAddressBtn = document.getElementById('confirmAddressBtn');
            const confirmOrderSummaryBtn = document.getElementById('confirmOrderSummaryBtn');
            const confirmPaymentBtn = document.getElementById('confirmPaymentBtn');

            const addressTick = document.getElementById('addressTick');
            const addressSelect = document.getElementById('addressSelect');
            const addressError = document.getElementById('addressError');
            const orderSummaryError = document.getElementById('orderSummaryError');
            const paymentError = document.getElementById('paymentError');

            const paymentOptions = document.querySelectorAll('input[name="payment"]');
            const cardDetails = document.getElementById('cardDetails');

            addressHeader.addEventListener('click', () => {
                toggleAccordion(addressContent);
            });

            orderSummaryHeader.addEventListener('click', () => {
                toggleAccordion(orderSummaryContent);
            });

            paymentHeader.addEventListener('click', () => {
                toggleAccordion(paymentContent);
            });

            confirmAddressBtn.addEventListener('click', () => {
                if (addressSelect.value === "") {
                    addressError.textContent = "Please select an address.";
                } else {
                    addressContent.style.display = 'none';
                    orderSummaryContent.style.display = 'block';
                    addressTick.style.display = 'inline';
                    addressError.textContent = "";
                }
            });

            confirmOrderSummaryBtn.addEventListener('click', () => {
                if (!document.querySelector('#orderSummaryContent .product')) {
                    orderSummaryError.textContent = "Your cart is empty.";
                } else {
                    orderSummaryContent.style.display = 'none';
                    paymentContent.style.display = 'block';
                    orderSummaryError.textContent = "";
                }
            });

            confirmPaymentBtn.addEventListener('click', () => {
                if (!document.querySelector('input[name="payment"]:checked')) {
                    paymentError.textContent = "Please select a payment method.";
                } else {
                    paymentError.textContent = "";
                    // Assuming the user completes the payment process successfully
                }
            });

            paymentOptions.forEach(option => {
                option.addEventListener('change', (event) => {
                    if (event.target.value === 'card') {
                        cardDetails.style.display = 'block';
                    } else {
                        cardDetails.style.display = 'none';
                    }
                });
            });

            function toggleAccordion(content) {
                const allContents = document.querySelectorAll('.accordion-content');
                allContents.forEach(c => {
                    if (c !== content) {
                        c.style.display = 'none';
                    }
                });
                content.style.display = content.style.display === 'block' ? 'none' : 'block';
            }
        });
    </script>

<script>
    function addAddress(event) {
        event.preventDefault();

        const name = document.getElementById('add-name').value.trim();
        const address = document.getElementById('add-address').value.trim();
        const phone = document.getElementById('add-phone').value.trim();
        const locality = document.getElementById('add-locality').value.trim();
        const pincode = document.getElementById('add-pincode').value.trim();
        const state = document.getElementById('add-state').value.trim();

        // Validation
        if (name === '') {
            showError('add-name-error', 'Please enter a name.');
            return;
        }
        if (address === '') {
            showError('add-address-error', 'Please enter an address.');
            return;
        }
        if (phone === '') {
            showError('add-phone-error', 'Please enter a phone number.');
            return;
        }
        if (locality === '') {
            showError('add-locality-error', 'Please enter a locality.');
            return;
        }
        if (pincode === '') {
            showError('add-pincode-error', 'Please enter a pincode.');
            return;
        }
        if (state === '') {
            showError('add-state-error', 'Please enter a state.');
            return;
        }

        // You can add more specific validation rules for each field if needed
        // Example: Phone number format validation

        const phoneRegex = /^\d{10}$/;
        if (!phoneRegex.test(phone)) {
            showError('add-phone-error', 'Please enter a valid 10-digit phone number.');
            return;
        }

        // Form data
        const data = { name, address, phone, locality, pincode, state };

        // POST request
        fetch('/addAddress', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => response.json())
        .then(data => {
            if (data.message === 'Address added successfully') {
                location.reload();
                $('#addAddressModal').modal('hide');
            }
        })
        .catch(error => console.error('Error:', error));
    }

    function showError(inputId, message) {
        const errorElement = document.getElementById(inputId);
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }

    document.addEventListener('DOMContentLoaded', () => {
        const addAddressForm = document.getElementById('addAddressForm');
        addAddressForm.addEventListener('submit', addAddress);

        // Reset error messages on input focus
        const formInputs = addAddressForm.querySelectorAll('.form-control');
        formInputs.forEach(input => {
            input.addEventListener('focus', () => {
                const errorId = input.id + '-error';
                const errorElement = document.getElementById(errorId);
                errorElement.textContent = '';
                errorElement.style.display = 'none';
            });
        });
    });
</script>












    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.querySelector('form[action="/checkout"]');
            const paymentError = document.getElementById('paymentError');
            const grandTotalSpan = document.getElementById('grand-total');
            const grandTotalValue = grandTotalSpan.textContent.trim().replace(/[^\d.-]/g, '');
            const totalAmount = parseFloat(grandTotalValue);

            form.addEventListener('submit', async function (event) {
                event.preventDefault(); // Prevent the default form submission
                const address = document.getElementById("addressSelect").value;
                console.log(address)
                const coupon = document.getElementById("couponid").innerHTML
                console.log(coupon);
                const paymentOption = document.querySelector('input[name="payment"]:checked').value;
                console.log("paymentOption:", paymentOption);

                if (paymentOption === 'razorpay') {
                    try {
                        const response = await fetch('/razorpay', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                amount: totalAmount,
                                currency: 'INR',
                                coupon: coupon
                            })
                        });

                        const data = await response.json();
                        console.log("Razorpay response data:", data);

                        if (response.ok) {
                            const options = {
                                "key": data.key,
                                "amount": data.amount,
                                "currency": "INR",
                                "name": data.name,
                                "description": "Payment",
                                "order_id": data.order_id,
                                "handler": async function (response) {
                                    try {
                                        const result = await fetch("/razorpay-success", {
                                            method: "POST",
                                            headers: {
                                                "Content-Type": "application/json"
                                            },
                                            body: JSON.stringify({
                                                razorpay_payment_id: response.razorpay_payment_id,
                                                razorpay_order_id: response.razorpay_order_id,
                                                razorpay_signature: response.razorpay_signature,
                                                address: address
                                            })
                                        });

                                        const resultData = await result.json();

                                        if (resultData.error) {
                                            return Swal.fire(resultData.error);
                                        }

                                        Swal.fire({
                                            title: 'Order Placed',
                                            text: 'Your Order has been placed.',
                                            icon: 'success',
                                            showCancelButton: true,
                                            cancelButtonText: 'Continue Browsing',
                                            confirmButtonText: 'Go To Your Order',
                                            allowOutsideClick: false
                                        }).then((result) => {
                                            if (result.isConfirmed) {
                                                window.location.href = '/order';
                                            } else {
                                                window.location.href = '/';
                                            }
                                        });
                                    } catch (error) {
                                        Swal.fire("Some Error Occurred.");
                                        console.error('Error handling payment success:', error);
                                    }
                                },
                                "prefill": {
                                    "name": data.prefill.name,
                                    "email": data.prefill.email,
                                    "contact": data.prefill.contact
                                },
                                "theme": {
                                    "color": data.theme.color
                                }
                            };

                            const rzp = new Razorpay(options);
                            rzp.on('payment.failed', function (response) {
                                alert(response.error.code);
                                alert(response.error.description);
                                alert(response.error.source);
                                alert(response.error.step);
                                alert(response.error.reason);
                                alert(response.error.metadata.order_id);
                                alert(response.error.metadata.payment_id);
                            });
                            rzp.open();
                        } else {
                            paymentError.innerText = data.message || 'Error processing payment.';
                        }
                    } catch (error) {
                        paymentError.innerText = 'Error processing Razorpay payment.';
                        console.error('Error details:', error);
                    }
                } else if (paymentOption === 'cod') {
                    form.submit();
                } else {
                    paymentError.innerText = 'Please select a payment option.';
                }
            });
        });

    </script>

    <!-- razorpay -->






    <!-- coupon -->

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const applyCouponBtn = document.getElementById('applyCouponBtn');
            const removeCouponBtn = document.getElementById('removeCouponBtn');
            const couponCodeInput = document.getElementById('couponCode');
            const couponError = document.getElementById('couponError');
            const discountAmountElement = document.getElementById('discount-amount');
            const grandTotalElement = document.getElementById('grand-total');
            const grandTotalInput = document.getElementById('grandTotalInput');

            let originalTotal = parseFloat(grandTotalElement.textContent.trim());

            applyCouponBtn.addEventListener('click', () => {
                const couponCode = couponCodeInput.value.trim();

                if (couponCode === '') {
                    couponError.textContent = "Please enter a coupon code.";
                    return;
                }

                fetch(`/validateCoupon/${couponCode}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.valid) {
                            const discountAmount = (originalTotal * data.discount / 100).toFixed(2);
                            discountAmountElement.textContent = discountAmount;

                            const discountedTotal = (originalTotal - discountAmount).toFixed(2);
                            grandTotalElement.textContent = discountedTotal;
                            grandTotalInput.value = discountedTotal;

                            document.getElementById("couponid").textContent = data.couponid

                            removeCouponBtn.style.display = 'inline-block';
                            applyCouponBtn.style.display = 'none';
                            couponError.textContent = "";
                        } else {
                            couponError.textContent = data.message;
                        }
                    })
                    .catch(error => {
                        console.error('Error validating coupon:', error);
                        couponError.textContent = "Error applying coupon.";
                    });
            });

            removeCouponBtn.addEventListener('click', () => {
                discountAmountElement.textContent = '0.00';
                grandTotalElement.textContent = originalTotal.toFixed(2);
                grandTotalInput.value = originalTotal.toFixed(2);

                couponCodeInput.value = '';
                removeCouponBtn.style.display = 'none';
                applyCouponBtn.style.display = 'inline-block';
                couponError.textContent = '';
            });
        });

    </script>


    <!-- coupon -->


</body>

</html>